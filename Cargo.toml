[package]
name = "rustyard"
edition = "2021"
rust-version = "1.80"
publish = false

# Profiles are important (for compilation speed); they deserve to be up here!
#   tbd. should we have profiles in a lib crate?  What is their relationship to a higher one?   Use a workspace?
#
[profile.dev]
opt-level = "z"
# 1: "basic" optimizations
overflow-checks = false     # disable integer overflow checks
panic = "abort"
# Defaults -> https://doc.rust-lang.org/cargo/reference/profiles.html?highlight=incremental#dev

[profile.release]
#debug         = "line-tables-only"
debug = true
#codegen-units = 1      # LLVM can perform better optimizations using a single thread
codegen-units = 32
opt-level     = "s"     # optimize for binary size, but keep loop vectorization enabled
panic = "abort"
lto           = "thin"  # "can produce better optimized code, using whole-program analysis, at the cost of longer linking time."
                        #   - thin: "similar to “fat”, but takes substantially less time to run [...]"
# Defaults -> https://doc.rust-lang.org/cargo/reference/profiles.html?highlight=incremental#release


[dependencies]
defmt           = { version = "0.3.8" }

[dev-dependencies]
assert_cfg      = "0.1.0"
defmt-rtt       = { version = "0.4.1" }
embedded-hal    = { version = "1.0.0" }
esp-backtrace   = { version = "0.13.0", features = ["exception-handler", "panic-handler", "defmt", "esp32c3"] }
esp-hal         = { version = "0.19.0", features = ["async", "defmt", "embedded-hal", "esp32c3"] }
static_cell     = { version = "2.1.0" }

# for 'examples/leds.rs'
# Note: "'dev-dependencies' are not allowed to be optional."
#
esp-hal-smartled    = { version = "0.12.0", features = ["esp32c3"] }
rand                = { version = "0.8.5", default-features = false, features = ["small_rng"] }
smart-leds          = { version = "0.4.0" }

[features]
dingdong = []
#smartleds = ["esp-hal-smartled", "smart-leds"]
